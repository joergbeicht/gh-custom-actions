name: 'Get & Cache Dependencies'
description: 'Get the dependencies (via npm) and cache them.'
inputs:
  mycaching:
    description: 'Whether to cache dependencies or not.'
    required: false
    default: 'true'
outputs:
  used-cache:
    description: 'Whether the cache was used.'
    # ${{  }} das ist eine dynamische Expression
    value: ${{ steps.install.outputs.cache }}    
runs:
  using: 'composite'
  steps:
    - name: Cache dependencies
      if: inputs.mycaching == 'true'
      id: cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      # Installiert die Dependencies falls sie nicht im Cache gefunden werden
      if: steps.cache.outputs.cache-hit != 'true' || inputs.mycaching != 'true'
      run: |
        npm ci
        echo "::set-output name=cache::'${{ inputs.mycaching }}'"
      # shell ist erg√§nzend notwendig, weil das eine custom action ist
      shell: bash